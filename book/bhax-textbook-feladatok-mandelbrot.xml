<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
            Megoldás videó: https://youtu.be/gvaqijHlRUs



        </para>
	<para>
		<figure>
		<title>Mandelbrot</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandel.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
	</para>
	<para>


<programlisting language="c++"><![CDATA[
#include <iostream>
#include "png++/png.hpp"

int main (int argc, char *argv[])
{
	if (argc !=2)
	{
		std::cout << " Missing starter argument " << std::endl;
		std::cout << " use like this: ./file filename ";
		return -1;
	}

	double a = -2.0;
	double b = 0.7;
	double c = -1.35;
	double d = 1.35;

	int height = 1024;
	int width = 768;
	int iterationHatar = 255;

	png::image <png::rgb_pixel> image (width, height);

	double dx= (b-a) / width;
	double dy= (d-c) / height;

	double reC;
	double imC;
	double reZ;
	double imZ;
	double newreZ;
	double newimZ;

	int iteration = 0;

	for (int i=0; i<height; ++i)
	{
		for(int j=0; j<width; ++j)
		{
			reC = a+k*dx;
			imC = d-j*dy;
			reZ = 0;
			imZ = 0;
			iteracio = 0;

			while (reZ*reZ + imZ* imZ < 4 && iteration < iterationHatar)
			{
				newreZ = reZ*reZ - imZ*imZ + reC;
				newimZ = 2*reZ*imZ + imC;
				reZ = newreZ;
				imZ = newimZ;

				++iteration;
			}

		image.set_pixel(i, j, png::rgb_pixel(255-iteration%256, 255-iteration%256, 255-iteration%256));
		}
	}

	image.write (argv[1]);
	std::cout << argv[1] << " Done " << std::endl;

}
]]>
</programlisting>
	</para>
	<para>
	A Mandelbrot-halmaz egy síkbeli alakzat, amelyet egy alapvetően nagyon egyszerű algebrai összefüggés bonyolultabb (végtelennel kapcsolatos, analitikus fogalmakat, határértékszámítást igénylő) elemzése ad meg, rajzol ki. Ezeknek az összefüggéseknek a még legegyszerűbb (bár nem az egyetlen lehetséges) megközelítési módja a komplex számok felhasználásával történhet. A Mandelbrot-halmaz a komplex számsíkon ábrázolható alakzat, amely számsík geometriailag semmiben sem különbözik a jól ismert („euklideszi”) síktól, csak a pontok számokkal való leírása más. 

(wikipedia)
	</para>
	<para>
	<programlisting language="c++"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
]]>
</programlisting>
	Elsőnek is szükségünk lesz a libpng, és libpng++ könyvtárakra, ezeket telepítenünk kell, amihez root jogok kellenek majd. Ezt felhasználva fogjuk létrehozni a képet ami tartalmazza magát a mandelbrotot.
	</para>
	<para>
	A 'main()'-ben legelső dolgunk hogy ellenőrizzük a helyes kezdő argumentumokat. Ha nem megfelelő, hiba üzenetet dobunk, leirjuk hogyan is kéne használni, és kilépünk.
	</para>
	<para>
	Megadjuk az értékészletet, és az iterációs határt, azaz az értelmezési tartományt. Használva a png++/png.hpp header fájlt, létrehozzunk egy üres png-t, megadjuk a paramétereit. Két 'for' ciklussal végig pásztázzuk a rácsot, mármint a png "pixeleit". Ahogy végig járjuk az értelmezési tartományt, megadjuk a 'c' számot, ehhez kiszámoljuk a 'z' értékét.
	</para>
	<para>
	Következik egy 'while' ciklus, ami addig fut, míg a 'z^2' kisebb mint 4, illetve amíg az értelmezési tartományon belül vagyunk. És mi van ha elérjük a határt? Azt jelenti, hogy konvergens az iteráció, tehát a Mandelbrot eleme lesz a 'c'.
	</para>
	<para>
	Utolsó lépésként megadjuk a png színeit, itt feketére szinezzük a mandelbrot figurát, majd kiiratjuk az
	<programlisting language="c++"><![CDATA[
	image.write([1]);
]]>
</programlisting>
	parancssal.
	</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
		Az előző programot átgondolva, úgymond magasabb szintre helyezzük. A '<![CDATA[<complex>]]>' könyvtár segitségével most az előzővel ellentétben nem két változóban mentjük el a komplex számokat, szétválasztva képzetes és valós részre, hanem egyben. 
        </para>
        <para>
<programlisting language="c++"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

]]>
</programlisting>              
        </para>
	<para>
	Az új elemek a programban az 'atoi' és az 'atof'. Ezeknek feladata, hogy a felhasználó által megadott stringeket 'int' illetve 'double' típussá irják át. 'atof' 'double'-ra, 'atoi' 'int'-re.
	</para>
	<para>
	Itt is létrehozzuk az üres png-t, amin ugyanúgy végig pásztázunk két egymásba ágyazott 'for' ciklussal a rácsot, beállítgatva a pixeleket. Most azonban teljes színkavalkádot fogunk kapni.
	</para>
	<para>
	A 'for' ciklusban már használjuk is a 'complex' könyvtárat. Alatta lévő 'while' részben abszolut értékeket számolunk 'abs' használatával.
	</para>
	<para>
	
	Ahhoz hogy futtasuk, meg kell adnunk a cél fájl nevét, a kép méreteit, az iterációs határt, és négy értéket. Mindet egy sorba.
	
	</para>
	<para>
	./complex complex.png 1920 1080 1020
</para>
	<para>
	0.4127655418209589255340574709407519549131
</para>
	<para>
	0.4127655418245818053080142817634623497725
</para>
	<para>
	0.2135387051768746491386963270997512154281
</para>
	<para>
	0.2135387051804975289126531379224616102874
	</para>








    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="http://www.t-es-t.hu/minden/kaosz/mandel.htm">http://www.t-es-t.hu/minden/kaosz/mandel.htm</link>
        </para>

		<figure>
		<title>Biomorf</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/biomorf.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
	<para>
	Mindenek előtt beszélnünk kell a Júlia halmazokról. Mi is az, mi köze van a biomorfokhoz?
	</para>
	<para>

	Az I. világháború idején Gaston Julia és Pierre Fatou francia matematikusok kutatásaik során furcsa halmazokat kaptak eredményül. Ezeket később Julia-halmazoknak nevezték el.
	</para>
	<para>
A Julia-halmazok formailag nagyon sokfélék. A számítógépek korában már könnyen megjeleníthetőek, így kiderült, hogy olyan bonyolult alakzatok ezek, amelyeket a végtelenségig nagyítva sem ismerhetünk meg teljes egészében. Vagyis szintén fraktálok.

</para>
	<para>

Benoit Mandelbrot 1979-ben fedezett fel egy egyszerű szabályt, illetve ezen szabály által létrehozható képet, amely tartalmazza az összes Julia-halmazt. 
	</para>

        <para>
	További érdekességekért keresd fel ezt az oldalt:

 <link xlink:href="http://www.t-es-t.hu/minden/kaosz/mandel.htm">http://www.t-es-t.hu/minden/kaosz/mandel.htm</link>

	</para>
        <para>
	<programlisting language ='C++'><![CDATA[

#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

	]]></programlisting>
        </para> 
	<para>
	
	</para>                       
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
		<figure>
		<title>Mandelbrot CUDA-val készítve</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandel2.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>

	<para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux/adatok.html">https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux/adatok.html</link>

	</para>
	<para>
	<programlisting language ='C++'><![CDATA[

#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk

  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;

  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  // z_{n+1} = z_n * z_n + c iterációk
  // számítása, amíg |z_n| < 2 vagy még
  // nem értük el a 255 iterációt, ha
  // viszont elértük, akkor úgy vesszük,
  // hogy a kiinduláci c komplex számra
  // az iteráció konvergens, azaz a c a
  // Mandelbrot halmaz eleme
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}


/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}
	]]></programlisting>
	</para>
	<para>
	Most a Mandelbrotunkat az Nvidia CUDA technológiájával hozzuk létre. Ez nagyságrendellek meggyorsítja a műveletet. Ehhez természetesen szükséges egy Nvidia videókártya, emellé fel kell telepítenünk a 'nvidia-cuda-toolkit'-et. A varázslat ott történik hogy létrehozunk egy 600x600 blokkból álló rácsot, és minden blokkot egy szálhoz kapcsolunk, így felgyorsítva a műveletet.
	</para>
	<para>

	A forráskód elején konstansokat definiálunk: a méretet és az iterációs határt. Ezután az előzőekkel megegyezően a 'mandel' függvénnyel létrehozzuk a halmazunkat.

	</para>
	<para>
	'nvcc'-vel fogjuk fordítani a programot, ahhoz hogy a CUDA-t használhassuk. Ez két részre osztja a programot: Host-ra és egy eszközhöz kötött részre, amit az Nvidia fordító hoz létre. Ehhez deklarációknál használnunk kell a '__global__' és '__device__' kifejezéseket. Ez jelzi a CUDA-nak hogy, haver, ezt kéne gépi kóddá átabrakadabrálni, kösz.
	</para>
	<para>
	A 'threadIdx.x/y' azt a szálat mutatja, amelyiken éppen az x és y számhoz tartozó érték számolódik ki.
	</para>













    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>

        <para>
            Megoldás forrása:  <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>
        </para>
	<para>
	Itt is Mandelbrot, what a surprise. Azonban most képesek leszünk nagyítani is egyes részeket. Viszont ennek ára van, a futtatás és fordítás most igazi nehézség lesz, az előzőekhez képesz legalábbbis. 5 bemeneti fájlra lesz szükségünk, természtetesen egy mappában, hogy használni tudjuk.
	</para>
	<para>
	Szükségünk lesz továbbá a libqt4-dev csomagra. Telepitéshet root jogok kellenek.
	</para>
<screen>
$ sudo apt-get install libqt5-dev
$ ls
frakablak.cpp frakablak.h frakszal.cpp frakszal.h main.cpp
$ qmake -project
$ ls
frakablak.cpp frakablak.h frakszal.cpp frakszal.h main.cpp Mandelnagy.pro
$ qmake Mandelnagy.pro
$ ls
frakablak.cpp frakszal.cpp main.cpp Mandelnagy.pro frakablak.h frakszal.h Makefile
$ make
</screen>
            
        <para>
		<figure>
		<title>Mandelbrot szinesen</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandel3.jpg" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
	<programlisting language ='C++'><![CDATA[
public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {
    /** A nagyítandó kijelölt területet bal felső sarka. */
    private int x, y;
    /** A nagyítandó kijelölt terület szélessége és magassága. */
    private int mx, my;
    /**
     * Létrehoz egy a Mandelbrot halmazt a komplex sík
     * [a,b]x[c,d] tartománya felett kiszámoló és nygítani tudó
     * <code>MandelbrotHalmazNagyító</code> objektumot.
     *
     * @param      a              a [a,b]x[c,d] tartomány a koordinátája.
     * @param      b              a [a,b]x[c,d] tartomány b koordinátája.
     * @param      c              a [a,b]x[c,d] tartomány c koordinátája.
     * @param      d              a [a,b]x[c,d] tartomány d koordinátája.
     * @param      szélesség      a halmazt tartalmazó tömb szélessége.
     * @param      iterációsHatár a számítás pontossága.
     */
    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {
        // Az ős osztály konstruktorának hívása
        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");
        // Egér kattintó események feldolgozása:
        addMouseListener(new java.awt.event.MouseAdapter() {
            // Egér kattintással jelöljük ki a nagyítandó területet
            // bal felső sarkát:
            public void mousePressed(java.awt.event.MouseEvent m) {
                // A nagyítandó kijelölt területet bal felső sarka:
                x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }
            // Vonszolva kijelölünk egy területet...
            // Ha felengedjük, akkor a kijelölt terület
            // újraszámítása indul:
            public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;
                // Az új Mandelbrot nagyító objektum elkészítése:
                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });
        // Egér mozgás események feldolgozása:
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            // Vonszolással jelöljük ki a négyzetet:
            public void mouseDragged(java.awt.event.MouseEvent m) {
                // A nagyítandó kijelölt terület szélessége és magassága:
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }
    /**
     * Pillanatfelvételek készítése.
     */
    public void pillanatfelvétel() {
        // Az elmentendő kép elkészítése:
        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();        
        // A pillanatfelvétel képfájl nevének képzése:
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");
        // A fájl nevébe belevesszük, hogy melyik tartományban
        // találtuk a halmazt:
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        // png formátumú képet mentünk
        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }    
    /**
     * A nagyítandó kijelölt területet jelző négyzet kirajzolása.
     */
    public void paint(java.awt.Graphics g) {
        // A Mandelbrot halmaz kirajzolása
         g.drawImage(kép, 0, 0, this);
        // Ha éppen fut a számítás, akkor egy vörös
        // vonallal jelöljük, hogy melyik sorban tart:         
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        // A jelző négyzet kirajzolása:
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }
    /**
     * Példányosít egy Mandelbrot halmazt nagyító obektumot.
     */
    public static void main(String[] args) {
        // A kiinduló halmazt a komplex sík [-2.0, .7]x[-1.35, 1.35]
        // tartományában keressük egy 600x600-as hálóval és az
        // aktuális nagyítási pontossággal:
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}
	]]></programlisting>
        </para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandelzoom1.png" format="PNG"/>
				</imageobject>
			</mediaobject>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandelzoom2.png" format="PNG"/>
				</imageobject>
			</mediaobject>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandelzoom3.png" format="PNG"/>
				</imageobject>
			</mediaobject>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandelzoom4.png" format="PNG"/>
				</imageobject>
			</mediaobject>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../book/img/mandelzoom5.png" format="PNG"/>
				</imageobject>
			</mediaobject>
    </section>

</chapter>                
