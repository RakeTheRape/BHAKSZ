<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása:
		<link xlink:href="https://github.com/RakeTheRape/BHAKSZ/blob/master/turing/">https://github.com/RakeTheRape/BHAKSZ/blob/master/turing/</link>          
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
	</para>
	<para>
		A program ciklusokat használva dolgoztatja meg a procit. Sokszor véletlenül készítünk végtelen ciklusokat. Az alábbi példa azt az esetet mutatja be ahol csak 1 magot használ 100%-on.
		<programlisting language="c">
		<![CDATA[
		int main()
		{
		for(;;);
		}
		]]>
		</programlisting>
	
        </para>
	<para>
	A következő példa már minden magot használ 100%-on.
	       <programlisting language="c">
		<![CDATA[   
			#include <omp.h>

			int main()
			{
			#pragma omp parallel
				{
				for(;;);
				}

			}
		]]>
		</programlisting>  
	Ennek a programnak a futtatásához szükséges a "-fopenmp" használata.
	</para>
	<para>
	Utolsó példánk mikor a program 0%-ban használja ki a procit. Ezt sleep parancssal érhetjük el a legegyszerübben.
	<programlisting language="c">
		<![CDATA[
		#include <unistd.h>

		int main()
		{
			for(;;) sleep(1);
		}
		]]>
		</programlisting>
	</para>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/RakeTheRape/BHAKSZ/tree/master/turing">https://github.com/RakeTheRape/BHAKSZ/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	Elsőnek is segédváltozóval oldjuk meg a problémát. Azaz létrehozunk még egy változót amiben tárolhatjuk az értéket.
	<programlisting><![CDATA[
		#include <stdio.h>

		int main()
		{
			printf("segédváltozó csere\n\n");
		int a=5;
		int b=7;

			printf("eredeti: a=%d b=%d\n",a,b);
		int c=a;
		a=b;
		b=c;

			printf("csere: a=%d b=%d\n",a,b);

			return 0;
		}
		]]></programlisting> 
	
	</para>
	<para>
	Ezután segédváltozó nélkül, szimpla összeadás kivonással oldjuk meg.
	<programlisting><![CDATA[
		#include <stdio.h>

		int main()
		{
			printf("valtozocsere valtozo nelkul\n\n");
		int a=5;
		int b=7;
			printf("eredeti: a=%d b=%d\n",a,b);
		a=a+b;
		b=a-b;
		a=a-b;
			printf("felcserelt: a=%d b=%d\n",a,b);
			return 0;
		}
	]]></programlisting>
	</para>
	<para>
	Végül exor-módszerrel is megoldjuk.
	<programlisting><![CDATA[
	#include <stdio.h>

	int main()
	{
		printf("Csere exorral\n\n");
		int a=5;
		int b=7;
		printf("Eredeti értékek: a=%d b=%d\n",a,b);
		a=a^b;
		b=a^b;
		a=a^b;
		printf("Felcserélt értékek: a=%d b=%d\n", a,b);
		return 0;
	}
	]]></programlisting>
	</para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/RakeTheRape/BHAKSZ/tree/master/turing">https://github.com/RakeTheRape/BHAKSZ/tree/master/turing</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	Labdapattogtatást egyszerű feltételvizsgálatokkal oldhatjuk meg, felvesszük a terminál méretét (initscr() function-nal), a labda kezdő helyét, gyorsaságát. Miután megadtuk a kezdő adatokat, "if" függvényekkel vizsgáljuk, hogy a labda az ablak széléhez ért-e, és irányt változtatunk. A labda gyorsaságának csökkentéséhez használhatjuk a usleep() függvényt, kép frissitéshez pedig a refresh()-t.
	<programlisting><![CDATA[
		#include <stdio.h>
		#include <curses.h>
		#include <unistd.h>

		int
		main ( void )
		{
		    WINDOW *ablak;
		    ablak = initscr ();

			int x = 0;
			int y = 0;
			int xnov = 1;
			int ynov = 1;
			int mx;
			int my;

		    for ( ;; ) {

			getmaxyx ( ablak, my , mx );

			mvprintw ( y, x, "O" );

			refresh ();
			usleep ( 100000 );
			clear();

			x = x + xnov;
			y = y + ynov;

			if ( x>=mx-1 )
			{
			    xnov = xnov * -1;
			}
			if ( x<=0 )
			{
			    xnov = xnov * -1;
			}
			if ( y<=0 )
			{
			    ynov = ynov * -1;
			}
			if ( y>=my-1 )
			{
			    ynov = ynov * -1;
			}
		    }

		    return 0;
		}
	
	]]></programlisting>
	</para>
	<para>
	Ha nagyon kalandvágyóak vagyunk if nélkül is elérhetjük ezt.
	<programlisting><![CDATA[
		#include <iostream>
		#include <iomanip>
		#include <unistd.h>

		using namespace std;

		int rajz(int x,int y, int h, int w)
		{
		    for(int i=1;i<=x;i++)
		    {
			cout<<"X";
			for(int j=1;j<=w;j++)
			{
				cout<<" ";
			}
			cout<<" X"<<endl;
		    }
		    cout<<"X";
		    for(int i=0;i<y;i++)
		    {
			cout<<" ";
		    }
		    cout<<"o";
		    for(int i=y;i<w;i++)
		    {
			cout<<" ";
		    }
		    cout<<"X"<<endl;
		    for(int i=x;i<h;i++)
		    {
			cout<<"X";
			for(int j=1;j<=w;j++)
			{
				cout<<" ";
			}
			cout<<" X"<<endl;
		    }

		    return 0;
		}

		int main()
		{
		    int x=0,y=0;
		    int width,height;

		    cout<<"Add meg a terulet szelesseget es magassagat, amin szeretned, hogy pattogjon a labda! \n";
		    cin>>height>>width;
		    while(true)
		    {
			system("clear");
			cout<<" ";
			for(int i=0;i<width+1;i++)
			{
				cout<<"X";
			}
			cout<<endl;
			rajz(abs(height-(x++%(height*2))),abs(width-(y++%(width*2))),height,width);
			cout<<" ";
			for(int i=0;i<width+1;i++)
			{
				cout<<"X";
			}
			cout<<endl;
			usleep(50000);
		    }
		    return 0;
		}

	]]></programlisting>
	</para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/RakeTheRape/BHAKSZ/tree/master/turing">https://github.com/RakeTheRape/BHAKSZ/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
	<para>
	Az 'int' méretét, és hogy hány bitet foglal, bitshifteléssel nézzük meg. A 'while' függvényben folyamatosan balra lépegetünk, és minden lépésnél növeljük a 'hossz' változót, amig a 'wat' változó nulláig nem ér.
	<programlisting><![CDATA[
	#include <stdio.h>
	int
	main (void)
	{
	  int hossz = 0;
	  int wat = 1;
	  do
	    ++hossz;
	  while (wat <<= 1);
	  printf ("szohossz: %d bites\n", hossz);
	  return 0;
	}
	]]></programlisting>
	Az 'int' 32 bites szó.
	</para>

	<para>
	BogoMips
	</para>

	<para>
	A BogoMips egy algoritmus ami a Linux kernelben méri fel a processzor sebességét az ú.n. 'busy-loop' konfigurálásához.
A 'busy-loop' annyit jelent, hogy egy process folytonosan egy feltételt vizsgál, amíg az igazat ad vissza értékül, BogoMips azt mutatja hány mp-ig áll a proci, tehát nem csinál semmit.
	<programlisting><![CDATA[
	#include <time.h>
	#include <stdio.h>

	void
	delay (unsigned long long int loops)
	{
	unsigned long long int i;
	for (i = 0; i < loops; i++);
	}

	int
	main (void)
	{
	unsigned long long int loops_per_sec = 1;
	unsigned long long int ticks;

	printf ("Calibrating delay loop..");
	fflush (stdout);

	while ((loops_per_sec <<= 1))
	{
	ticks = clock ();
	delay (loops_per_sec);
	ticks = clock () - ticks;

	printf ("%llu %llu\n", ticks, loops_per_sec);

	if (ticks >= CLOCKS_PER_SEC)
	{
	loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
	(loops_per_sec / 5000) % 100);

	return 0;
	}
	}

	printf ("failed\n");
	return -1;
	}
	]]></programlisting>
	 Bitshifteléssel megyünk a while ciklusban végig a 2 hatványain.
            A ticks-ben tároljuk mennyi processzoridőt használt a CPU eddig, majd a delay() függvénynek
            átadjuk loops_per_sec változót (aminek a bitjei mindig odébb vannak eggyel tolva), ahol elszámolunk
            0-tól a változó végéig. 
            Ezután megint lekérjük a processzoridőt kivonva az előző ticks-ben tárolt CPU időt, így megkapjuk,
            mennyi ideig tartott a elszámolni a loops_per_sec változó végéig.
            Majd megnézzük if-el, hogy nagyobb vagy egyenlő a kapott ticks, mint a CLOCKS_PER_SEC aminek az értéke
            1 millió és ha ez igaz, akkor kiszámoljuk, hogy milyen érték kell ahhoz,hogy a ciklusértékéket megkapjuk, ezzel 
meghatározva a CPU sebességét. 
	
	
	</para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/RakeTheRape/BHAKSZ/tree/master/turing">https://github.com/RakeTheRape/BHAKSZ/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	 A Page Rank az interneten található oldalakat rangsorolja. Kezdetben minden oldalnak van egy szavazati pontja és ha
            az egyik linkeli a másikat, akkor a linkelt oldal megkapja a linkelő pontját. Tehát egy oldal akkor lesz előkelőbb helyen egy google
            kereséskor, ha minél több másik oldal linkel rá, illetve ezen oldalakra is minél többen linkelnek,
annál jobb minőségűnek fog számítani egy linkelése vagy szavazata.
	<programlisting><![CDATA[
		#include <stdio.h>
		#include <math.h>

		void
		kiir (double tomb[], int db)
		{
		  int i;

		  for (i = 0; i < db; ++i)
		    printf ("%f\n", tomb[i]);
		}

		double
		tavolsag (double PR[], double PRv[], int n)
		{
		  double osszeg = 0.0;
		  int i;

		  for (i = 0; i < n; ++i)
		    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

		  return sqrt(osszeg);
		}

		int
		main (void)
		{

		  double L[4][4] = {
		    {0.0, 0.0, 1.0 / 3.0, 0.0},
		    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
		    {0.0, 1.0 / 2.0, 0.0, 0.0},
		    {0.0, 0.0, 1.0 / 3.0, 0.0}
		  };

		  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
		  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

		  int i, j;

		  for (;;)
		    {

		      for (i = 0; i < 4; ++i)
			{
			  PR[i] = 0.0;
			  for (j = 0; j < 4; ++j)
			    PR[i] += (L[i][j] * PRv[j]);
			}
		      if (tavolsag (PR, PRv, 4) < 0.00000001)
			break;

		      for (i = 0; i < 4; ++i)
			PRv[i] = PR[i];

		    }

		  kiir (PR, 4);

		  return 0;
		}

	]]></programlisting>
	</para>

	<para>
            Az L nevű többdimenziós tömbben vannak rögzítve mátrix formájában az adatok a linkelésekről, melyik oldalra melyik oldal linkel és mennyit.
            A végtelen ciklusban nullázzuk PR összes elemét, majd rögtön hozzáadjuk az L mátrix és PRv vektor szorzatainak értékét.
            Ezután a távolság metódusunkban végigmegyünk a PR és PRv vektorokon és egy változóban eltároljuk ezek különbségének a négyzetét (hogy ne legyen negatív) és gyököt
            vonva visszaadjuk az értéket, amely ha kisebb mint 0.00000001, akkor kilépünk a végtelen ciklusból, ellenkező esetben
            pedig PRv tömböt feltöltjük PR elemeivel. Végül kiiratjuk az értékeket.
</para>

    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	<para>
A Brun tétel azt mondja, hogy az ikerprímszámok reciprokából képzett összege konvergál egy számhoz. Ezt határt 
Brun konstansnak nevezzük. Ezzel ellentétben a prímszámok a végtelen felé tartanak.
	</para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
	<para>
            A Monty Hall probléma egy amerikai televíziós vetélekedőben jelent meg, ahol a műsor végén a játékosnak 3 ajtó közül kellett választania. 
            A nyeremény csak az egyik ajtó mögött volt. A játékos választása után a műsorvezető kinyitott egy üres ajtót és feltette a kérdést, hogy fenntartja-e a választását a játékos vagy
            egy másik ajtót választ. A Monty Hall probléma kérdése, hogy számít-e, hogy a játékos megváltoztatja-e a választását.
            Józan ésszel gondolkodva nem számít, mivel a maradék két ajtó közül az egyik mögött van a nyeremény, így 50-50% az esélye annak, hogy nyerünk.
            A feladvány bizonyítása több matematikai professzoron is kifogott, köztük a világhírű Erdős Pálon is, akit csak a számítógépes szimuláció győzött meg, ami alapján
            számít, hogy másik ajtót választunk, ugyanis ekkor megduplázódik az esélyünk a nyerésre.
	Amikor először választunk ajtót, akkor 1/3 az esélye annak, hogy eltaláljuk a nyertes ajtót és 2/3, hogy nem. Ezután a játékvezető kinyit egy ajtót, amelyik üres
            és ha nem változtatunk a döntésünkön, továbbra is 1/3 lesz annak az esélye, hogy nyertünk. Viszont mivel már csak 2 ajtó van a játékban ezért ha változtatunk, akkor
2/3 lesz az esélyünk a nyerésre.

<programlisting>
<![CDATA[
kiserletek_szama=1000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }
    musorvezeto[i] = mibol[sample(1:length(mibol),1)]
}
nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}
valtoztatesnyer = which(kiserlet==valtoztat)
sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
]]>
</programlisting>
</para>
<para>
            Először eltároljuk, hogy hány kisérletet végezzünk el, majd a kiserlet és jatekos vektorokban kisorsolunk 1 és 3 között véletlenszerűen számokat.
            A műsorvezető vektorát beállítjuk a kísérletek számával. Ezután egy for ciklussal végigmegyünk minden kísérleten és ha kiserlet i-edig értéke megyegyezik a 
            a játékos i-edig találatával, az jelenti, hogy eltalálta a játékos a nyereményt és a mibol vektorba az a két érték kerül be amelyeket a játékos nem
            választott. (Ez a két érték az üres ajtókat jelenti ebben az esetben.)
        </para>  
        <para>
            Ha a játékos nem találta el elsőre a kiserlet vektorban található számot, akkor a mibol vektorba már csak 1 egy érték kerülhet, az amelyik nem a nyeremény és nem
            a játékos által kiválasztott érték. Ezután a musorvezeto vektorba berakjuk a mibol vektorban található számot, illetve ha két érték van benne akkor a kettőből az egyiket 
            véletlenszerűen.
        </para>
        <para>
            Ezután értkezik a kiértékelés. A nemvaltoztatesnyer vektorba kerülnek azok az esetek, amikor elsőre eltalálja a játékos a megfelelő ajtót.
            Megint végigmegyünk a kísérleteken és a holvalt vektorba azok vagy az az érték kerül az 1, 2 és 3 közül amely nem egyenlő a műsorvezető és a játékos által 
            választottal vagyis ekkor ha váltana a játékos akkor nyerne. A változtat vektorba pedig a holvalt vektor elemei közül az egyiket rakjuk át.
        </para>
        
        <para>
            A valtoztatesnyer vektorba pedig azok az értékek kerülnek, amelyek a kiserlet vektorba és a változtat vektorba találhatóak, vagyis ekkor az az ajtó a nyertes
            ,amelyiket másodjára választanánk. Eztuán pedig kiiratjuk az esetek számait:    
</para>
<programlisting language="R">
<![CDATA[
[1] "Kiserletek szama: 1000000"
> length(nemvaltoztatesnyer)
[1] 333590
> length(valtoztatesnyer)
[1] 666410
> length(nemvaltoztatesnyer)/length(valtoztatesnyer)
[1] 0.5005777
> length(nemvaltoztatesnyer)+length(valtoztatesnyer)
[1] 1000000
]]>
</programlisting> 

    </section>

</chapter>                
